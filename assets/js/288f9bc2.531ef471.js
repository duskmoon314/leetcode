(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[3449],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,u=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),f=c(t),m=l,d=f["".concat(u,".").concat(m)]||f[m]||s[m]||o;return t?r.createElement(d,i(i({ref:n},p),{},{components:t})):r.createElement(d,i({ref:n},p))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,i=new Array(o);i[0]=f;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:l,i[1]=a;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4649:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return u},metadata:function(){return c},assets:function(){return p},toc:function(){return s},default:function(){return m}});var r=t(4034),l=t(9973),o=(t(7294),t(3905)),i=["components"],a={slug:"lcp07",title:"LCP 07 \u4f20\u9012\u4fe1\u606f",tags:["DFS"]},u=void 0,c={permalink:"/leetcode/lcp07",editUrl:"https://github.com/duskmoon314/leetcode/edit/master/website/blog/blog/2021-07-01-lcp07.md",source:"@site/blog/2021-07-01-lcp07.md",title:"LCP 07 \u4f20\u9012\u4fe1\u606f",description:"LCP 07\uff0c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u89e3\u51b3",date:"2021-07-01T00:00:00.000Z",formattedDate:"July 1, 2021",tags:[{label:"DFS",permalink:"/leetcode/tags/dfs"}],readingTime:2.99,truncated:!0,authors:[],prevItem:{title:"1833 \u96ea\u7cd5\u7684\u6700\u5927\u6570\u91cf",permalink:"/leetcode/1833"},nextItem:{title:"Hello",permalink:"/leetcode/hello-world"}},p={authorsImageUrls:[]},s=[{value:"\u9898\u76ee",id:"\u9898\u76ee",children:[],level:2},{value:"C++ Solution",id:"c-solution",children:[],level:2},{value:"Rust Solution",id:"rust-solution",children:[],level:2}],f={toc:s};function m(e){var n=e.components,t=(0,l.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"LCP 07\uff0c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u89e3\u51b3"),(0,o.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,o.kt)("p",null,"\u5c0f\u670b\u53cb A \u5728\u548c ta \u7684\u5c0f\u4f19\u4f34\u4eec\u73a9\u4f20\u4fe1\u606f\u6e38\u620f\uff0c\u6e38\u620f\u89c4\u5219\u5982\u4e0b\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u6709 n \u540d\u73a9\u5bb6\uff0c\u6240\u6709\u73a9\u5bb6\u7f16\u53f7\u5206\u522b\u4e3a 0 \uff5e n-1\uff0c\u5176\u4e2d\u5c0f\u670b\u53cb A \u7684\u7f16\u53f7\u4e3a 0"),(0,o.kt)("li",{parentName:"ol"},"\u6bcf\u4e2a\u73a9\u5bb6\u90fd\u6709\u56fa\u5b9a\u7684\u82e5\u5e72\u4e2a\u53ef\u4f20\u4fe1\u606f\u7684\u5176\u4ed6\u73a9\u5bb6\uff08\u4e5f\u53ef\u80fd\u6ca1\u6709\uff09\u3002\u4f20\u4fe1\u606f\u7684\u5173\u7cfb\u662f\u5355\u5411\u7684\uff08\u6bd4\u5982 A \u53ef\u4ee5\u5411 B \u4f20\u4fe1\u606f\uff0c\u4f46 B \u4e0d\u80fd\u5411 A \u4f20\u4fe1\u606f\uff09\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u6bcf\u8f6e\u4fe1\u606f\u5fc5\u987b\u9700\u8981\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u4eba\uff0c\u4e14\u4fe1\u606f\u53ef\u91cd\u590d\u7ecf\u8fc7\u540c\u4e00\u4e2a\u4eba")),(0,o.kt)("p",null,"\u7ed9\u5b9a\u603b\u73a9\u5bb6\u6570 n\uff0c\u4ee5\u53ca\u6309 ","[\u73a9\u5bb6\u7f16\u53f7,\u5bf9\u5e94\u53ef\u4f20\u9012\u73a9\u5bb6\u7f16\u53f7]"," \u5173\u7cfb\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4 relation\u3002\u8fd4\u56de\u4fe1\u606f\u4ece\u5c0f A (\u7f16\u53f7 0 ) \u7ecf\u8fc7 k \u8f6e\u4f20\u9012\u5230\u7f16\u53f7\u4e3a n-1 \u7684\u5c0f\u4f19\u4f34\u5904\u7684\u65b9\u6848\u6570\uff1b\u82e5\u4e0d\u80fd\u5230\u8fbe\uff0c\u8fd4\u56de 0\u3002"),(0,o.kt)("p",null,"\u793a\u4f8b 1\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u8f93\u5165\uff1an = 5, relation = [","[0,2]",",","[2,1]",",","[3,4]",",","[2,3]",",","[1,4]",",","[2,0]",",","[0,4]","], k = 3"),(0,o.kt)("li",{parentName:"ul"},"\u8f93\u51fa\uff1a3"),(0,o.kt)("li",{parentName:"ul"},"\u89e3\u91ca\uff1a\u4fe1\u606f\u4ece\u5c0f A \u7f16\u53f7 0 \u5904\u5f00\u59cb\uff0c\u7ecf 3 \u8f6e\u4f20\u9012\uff0c\u5230\u8fbe\u7f16\u53f7 4\u3002\u5171\u6709 3 \u79cd\u65b9\u6848\uff0c\u5206\u522b\u662f 0->2->0->4\uff0c 0->2->1->4\uff0c 0->2->3->4\u3002")),(0,o.kt)("p",null,"\u793a\u4f8b 2\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u8f93\u5165\uff1an = 3, relation = [","[0,2]",",","[2,1]","], k = 2"),(0,o.kt)("li",{parentName:"ul"},"\u8f93\u51fa\uff1a0"),(0,o.kt)("li",{parentName:"ul"},"\u89e3\u91ca\uff1a\u4fe1\u606f\u4e0d\u80fd\u4ece\u5c0f A \u5904\u7ecf\u8fc7 2 \u8f6e\u4f20\u9012\u5230\u7f16\u53f7 2")),(0,o.kt)("p",null,"\u9650\u5236\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"2 <= n <= 10\n1 <= k <= 5\n1 <= relation.length <= 90, \u4e14 relation[i].length == 2\n0 <= relation[i][0],relation[i][1] < n \u4e14 relation[i][0] != relation[i][1]\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u94fe\u63a5\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/chuan-di-xin-xi"},"https://leetcode-cn.com/problems/chuan-di-xin-xi"),"\n\u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002")),(0,o.kt)("h2",{id:"c-solution"},"C++ Solution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int numWays(int n, vector<vector<int>>& relation, int k) {\n        return dfs(0, relation, n, k);\n    }\n\n    int dfs(int current, vector<vector<int>>& relation, int n, int k){\n        if (k == 0 && current == n - 1){\n            // Find a solution\n            return 1;\n        }\n        else if (k == 0) {\n            return 0;\n        }\n        else {\n            int ans = 0;\n            for (int i = 0; i < relation.size(); ++i){\n                if (relation[i][0] == current) {\n                    ans += dfs(relation[i][1], relation, n, k - 1);\n                }\n            }\n            return ans;\n        }\n    }\n};\n")),(0,o.kt)("h2",{id:"rust-solution"},"Rust Solution"),(0,o.kt)("p",null,"\u4e00\u4e2a\u7c7b\u4f3c\u4e0a\u65b9 cpp \u7684\uff0c\u53ef\u80fd\u975e\u5e38\u4e0d rust \u7684\u5199\u6cd5\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn num_ways(n: i32, relation: Vec<Vec<i32>>, k: i32) -> i32 {\n        fn dfs(current: i32, relation: &Vec<Vec<i32>>, n: i32, k: i32) -> i32 {\n            if k == 0 && current == n - 1 {\n                1\n            }\n            else if k == 0 {\n                0\n            }\n            else {\n                let mut ans: i32 = 0;\n                for r in relation {\n                    if r[0] == current {\n                        ans = ans + dfs(r[1], relation, n, k - 1);\n                    }\n                }\n                ans\n            }\n        }\n\n        dfs(0, &relation, n, k)\n    }\n}\n")))}m.isMDXComponent=!0}}]);