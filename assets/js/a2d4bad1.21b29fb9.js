(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[5338],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),f=c(n),m=o,d=f["".concat(u,".").concat(m)]||f[m]||s[m]||l;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=f;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<l;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5917:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return c},assets:function(){return p},toc:function(){return s},default:function(){return m}});var r=n(4034),o=n(9973),l=(n(7294),n(3905)),a=["components"],i={slug:1588,title:"1588 \u6240\u6709\u5947\u6570\u957f\u5ea6\u5b50\u6570\u7ec4\u7684\u548c",tags:["\u524d\u7f00\u548c"]},u=void 0,c={permalink:"/leetcode/1588",editUrl:"https://github.com/duskmoon314/leetcode/edit/master/website/blog/blog/2021-08-29-1588.md",source:"@site/blog/2021-08-29-1588.md",title:"1588 \u6240\u6709\u5947\u6570\u957f\u5ea6\u5b50\u6570\u7ec4\u7684\u548c",description:"\u8ba1\u7b97\u524d\u7f00\u548c\uff0c\u7136\u540e\u5faa\u73af\u505a\u5dee\u5c31\u53ef\u4ee5\u4e86",date:"2021-08-29T00:00:00.000Z",formattedDate:"August 29, 2021",tags:[{label:"\u524d\u7f00\u548c",permalink:"/leetcode/tags/\u524d\u7f00\u548c"}],readingTime:1.77,truncated:!0,authors:[],prevItem:{title:"528 \u6309\u6743\u91cd\u968f\u673a\u9009\u62e9",permalink:"/leetcode/528"},nextItem:{title:"1480 \u4e00\u7ef4\u6570\u7ec4\u7684\u52a8\u6001\u548c",permalink:"/leetcode/1480"}},p={authorsImageUrls:[]},s=[{value:"\u9898\u76ee",id:"\u9898\u76ee",children:[],level:2},{value:"C++ Solution",id:"c-solution",children:[],level:2}],f={toc:s};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"\u8ba1\u7b97\u524d\u7f00\u548c\uff0c\u7136\u540e\u5faa\u73af\u505a\u5dee\u5c31\u53ef\u4ee5\u4e86"),(0,l.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,l.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4 \xa0arr\xa0\uff0c\u8bf7\u4f60\u8ba1\u7b97\u6240\u6709\u53ef\u80fd\u7684\u5947\u6570\u957f\u5ea6\u5b50\u6570\u7ec4\u7684\u548c\u3002"),(0,l.kt)("p",null,"\u5b50\u6570\u7ec4 \u5b9a\u4e49\u4e3a\u539f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217\u3002"),(0,l.kt)("p",null,"\u8bf7\u4f60\u8fd4\u56de arr\xa0 \u4e2d \u6240\u6709\u5947\u6570\u957f\u5ea6\u5b50\u6570\u7ec4\u7684\u548c \u3002"),(0,l.kt)("p",null,"\u793a\u4f8b 1\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aarr = [1,4,2,5,3]\n\u8f93\u51fa\uff1a58\n\u89e3\u91ca\uff1a\u6240\u6709\u5947\u6570\u957f\u5ea6\u5b50\u6570\u7ec4\u548c\u5b83\u4eec\u7684\u548c\u4e3a\uff1a\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\n\u6211\u4eec\u5c06\u6240\u6709\u503c\u6c42\u548c\u5f97\u5230 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\n")),(0,l.kt)("p",null,"\u793a\u4f8b 2\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aarr = [1,2]\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\u603b\u5171\u53ea\u6709 2 \u4e2a\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u5b50\u6570\u7ec4\uff0c[1] \u548c [2]\u3002\u5b83\u4eec\u7684\u548c\u4e3a 3 \u3002\n")),(0,l.kt)("p",null,"\u793a\u4f8b 3\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aarr = [10,11,12]\n\u8f93\u51fa\uff1a66\n")),(0,l.kt)("p",null,"\u63d0\u793a\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1 <= arr.length <= 100\n1 <= arr[i] <= 1000\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u94fe\u63a5\uff1a",(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays"},"https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays"),"\n\u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002")),(0,l.kt)("h2",{id:"c-solution"},"C++ Solution"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int sumOddLengthSubarrays(vector<int> &arr) {\n        if (arr.size() == 1)\n        {\n            return arr[0];\n        }\n        arr.insert(arr.begin(), 0);\n        for (int i = 1; i < arr.size(); ++i)\n        {\n            arr[i] += arr[i - 1];\n        }\n        int result = 0;\n        for (int i = 1; i < arr.size(); ++i)\n        {\n            for (int j = i; j < arr.size(); j += 2)\n            {\n                result += arr[j] - arr[i - 1];\n            }\n        }\n        return result;\n    }\n};\n")))}m.isMDXComponent=!0}}]);