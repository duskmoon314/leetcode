(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[8922],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return i},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},i=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,u=e.originalType,c=e.parentName,i=a(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||u;return n?r.createElement(f,l(l({ref:t},i),{},{components:n})):r.createElement(f,l({ref:t},i))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var u=n.length,l=new Array(u);l[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var s=2;s<u;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8370:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return s},assets:function(){return i},toc:function(){return p},default:function(){return d}});var r=n(4034),o=n(9973),u=(n(7294),n(3905)),l=["components"],a={slug:930,title:"930 \u548c\u76f8\u540c\u7684\u4e8c\u5143\u5b50\u6570\u7ec4",tags:["\u524d\u7f00\u548c","HashMap"]},c=void 0,s={permalink:"/leetcode/930",editUrl:"https://github.com/duskmoon314/leetcode/edit/master/website/blog/blog/2021-07-08-930.md",source:"@site/blog/2021-07-08-930.md",title:"930 \u548c\u76f8\u540c\u7684\u4e8c\u5143\u5b50\u6570\u7ec4",description:"\u8fd9\u662f\u4e00\u9053\u638c\u63e1\u524d\u7f00\u548c\u4e0e HashMap \u540e\u53ef\u4ee5\u5feb\u901f\u5199\u51fa\u6765\u7684\u9898\uff0c\u6ca1\u638c\u63e1\u5c31\u9ebb\u70e6\u4e86 orz",date:"2021-07-08T00:00:00.000Z",formattedDate:"July 8, 2021",tags:[{label:"\u524d\u7f00\u548c",permalink:"/leetcode/tags/\u524d\u7f00\u548c"},{label:"HashMap",permalink:"/leetcode/tags/hash-map"}],readingTime:1.425,truncated:!0,authors:[],prevItem:{title:"345 \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd",permalink:"/leetcode/345"},nextItem:{title:"1833 \u96ea\u7cd5\u7684\u6700\u5927\u6570\u91cf",permalink:"/leetcode/1833"}},i={authorsImageUrls:[]},p=[{value:"\u9898\u76ee",id:"\u9898\u76ee",children:[],level:2},{value:"C++ Solution",id:"c-solution",children:[],level:2},{value:"Rust Solution",id:"rust-solution",children:[],level:2}],m={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,l);return(0,u.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("p",null,"\u8fd9\u662f\u4e00\u9053\u638c\u63e1\u524d\u7f00\u548c\u4e0e HashMap \u540e\u53ef\u4ee5\u5feb\u901f\u5199\u51fa\u6765\u7684\u9898\uff0c\u6ca1\u638c\u63e1\u5c31\u9ebb\u70e6\u4e86 orz"),(0,u.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,u.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u5143\u6570\u7ec4 nums \uff0c\u548c\u4e00\u4e2a\u6574\u6570 goal \uff0c\u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de\u6709\u591a\u5c11\u4e2a\u548c\u4e3a goal \u7684 \u975e\u7a7a \u5b50\u6570\u7ec4\u3002"),(0,u.kt)("p",null,"\u5b50\u6570\u7ec4 \u662f\u6570\u7ec4\u7684\u4e00\u6bb5\u8fde\u7eed\u90e8\u5206\u3002"),(0,u.kt)("p",null,"\u793a\u4f8b 1\uff1a"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1anums = [1,0,1,0,1], goal = 2\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\n\u6709 4 \u4e2a\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u5b50\u6570\u7ec4\uff1a[1,0,1]\u3001[1,0,1,0]\u3001[0,1,0,1]\u3001[1,0,1]\n")),(0,u.kt)("p",null,"\u793a\u4f8b 2\uff1a"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1anums = [0,0,0,0,0], goal = 0\n\u8f93\u51fa\uff1a15\n")),(0,u.kt)("p",null,"\u63d0\u793a\uff1a"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"1 <= nums.length <= 3 \\* 104\nnums[i] \u4e0d\u662f 0 \u5c31\u662f 1\n0 <= goal <= nums.length\n")),(0,u.kt)("blockquote",null,(0,u.kt)("p",{parentName:"blockquote"},"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u94fe\u63a5\uff1a",(0,u.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/binary-subarrays-with-sum"},"https://leetcode-cn.com/problems/binary-subarrays-with-sum"),"\n\u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002")),(0,u.kt)("h2",{id:"c-solution"},"C++ Solution"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},"int numSubarraysWithSum(vector<int> &nums, int goal)\n{\n    int sum = 0;\n    unordered_map<int, int> sum_cnt;\n    int result = 0;\n    for (auto n : nums)\n    {\n        sum_cnt[sum]++;\n        sum += n;\n        result += sum_cnt[sum - goal];\n    }\n    return result;\n}\n")),(0,u.kt)("h2",{id:"rust-solution"},"Rust Solution"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn num_subarrays_with_sum(nums: Vec<i32>, goal: i32) -> i32 {\n    use std::collections::HashMap;\n\n    let mut sum = 0;\n    let mut sum_cnt = HashMap::new();\n    let mut result = 0;\n\n    for n in nums {\n        *sum_cnt.entry(sum).or_insert(0) += 1;\n        sum += n;\n        result += sum_cnt.get(&(sum - goal)).unwrap_or(&0);\n    }\n\n    result\n}\n")))}d.isMDXComponent=!0}}]);