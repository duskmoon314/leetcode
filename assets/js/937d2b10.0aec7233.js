(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[339],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),f=u(n),m=o,d=f["".concat(i,".").concat(m)]||f[m]||s[m]||a;return n?r.createElement(d,l(l({ref:t},p),{},{components:n})):r.createElement(d,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4336:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return u},assets:function(){return p},toc:function(){return s},default:function(){return m}});var r=n(4034),o=n(9973),a=(n(7294),n(3905)),l=["components"],c={slug:17.14,title:"\u9762\u8bd5\u9898 17.14 \u6700\u5c0f K \u4e2a\u6570",tags:["\u5806","\u4f18\u5148\u961f\u5217","\u5feb\u901f\u6392\u5e8f"]},i=void 0,u={permalink:"/leetcode/17.14",editUrl:"https://github.com/duskmoon314/leetcode/edit/master/website/blog/blog/2021-09-03-17.14.md",source:"@site/blog/2021-09-03-17.14.md",title:"\u9762\u8bd5\u9898 17.14 \u6700\u5c0f K \u4e2a\u6570",description:"\u6bd4\u8f83\u76f4\u63a5\u7684\u53ef\u4ee5\u60f3\u5230\u6392\u5e8f\u9009\u62e9\uff0c\u4f46\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u8fd9\u6837\u7684\u65f6\u7a7a\u590d\u6742\u5ea6\u3002\u63a5\u7740\u53ef\u4ee5\u60f3\u5230\u4f7f\u7528\u5927\u6839\u5806\uff0c\u7ef4\u62a4\u6700\u5c0f\u7684 K \u4e2a\u6570\u3002\u8fdb\u4e00\u6b65\u53ef\u4ee5\u60f3\u9012\u5f52\u5730\u4f7f\u7528\u5feb\u6392\u627e\u8f74\u70b9\uff0c\u4f46\u5199\u8d77\u6765\u5c31\u590d\u6742\u4e86\u3002",date:"2021-09-03T00:00:00.000Z",formattedDate:"September 3, 2021",tags:[{label:"\u5806",permalink:"/leetcode/tags/\u5806"},{label:"\u4f18\u5148\u961f\u5217",permalink:"/leetcode/tags/\u4f18\u5148\u961f\u5217"},{label:"\u5feb\u901f\u6392\u5e8f",permalink:"/leetcode/tags/\u5feb\u901f\u6392\u5e8f"}],readingTime:1.165,truncated:!0,authors:[],prevItem:{title:"\u5251\u6307 Offer 10-I \u6590\u6ce2\u90a3\u5951\u6570\u5217",permalink:"/leetcode/offer10I"},nextItem:{title:"\u5251\u6307 Offer 22 \u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9",permalink:"/leetcode/offer22"}},p={authorsImageUrls:[]},s=[{value:"\u9898\u76ee",id:"\u9898\u76ee",children:[],level:2},{value:"C++ Solution",id:"c-solution",children:[],level:2}],f={toc:s};function m(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u6bd4\u8f83\u76f4\u63a5\u7684\u53ef\u4ee5\u60f3\u5230\u6392\u5e8f\u9009\u62e9\uff0c\u4f46\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u8fd9\u6837\u7684\u65f6\u7a7a\u590d\u6742\u5ea6\u3002\u63a5\u7740\u53ef\u4ee5\u60f3\u5230\u4f7f\u7528\u5927\u6839\u5806\uff0c\u7ef4\u62a4\u6700\u5c0f\u7684 K \u4e2a\u6570\u3002\u8fdb\u4e00\u6b65\u53ef\u4ee5\u60f3\u9012\u5f52\u5730\u4f7f\u7528\u5feb\u6392\u627e\u8f74\u70b9\uff0c\u4f46\u5199\u8d77\u6765\u5c31\u590d\u6742\u4e86\u3002"),(0,a.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,a.kt)("p",null,"\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u627e\u51fa\u6570\u7ec4\u4e2d\u6700\u5c0f\u7684 k \u4e2a\u6570\u3002\u4ee5\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u8fd9 k \u4e2a\u6570\u5747\u53ef\u3002"),(0,a.kt)("p",null,"\u793a\u4f8b\uff1a"),(0,a.kt)("p",null,"\u8f93\u5165\uff1a arr = ","[1,3,5,7,2,4,6,8]",", k = 4\n\u8f93\u51fa\uff1a ","[1,2,3,4]","\n\u63d0\u793a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"0 <= len(arr) <= 100000\n0 <= k <= min(100000, len(arr))\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u94fe\u63a5\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/smallest-k-lcci"},"https://leetcode-cn.com/problems/smallest-k-lcci"),"\n\u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002")),(0,a.kt)("h2",{id:"c-solution"},"C++ Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> smallestK(vector<int>& arr, int k) {\n        vector<int> ans(arr.begin(), arr.begin() + k);\n        if (k == 0) {\n            return ans;\n        }\n        make_heap(ans.begin(), ans.end());\n        for(int i = k; i < arr.size(); ++i) {\n            if (arr[i] < ans[0]) {\n                pop_heap(ans.begin(), ans.end());\n                ans[k - 1] = arr[i];\n                push_heap(ans.begin(), ans.end());\n            }\n        }\n        return ans;\n    }\n};\n")))}m.isMDXComponent=!0}}]);