(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[2602],{3905:function(n,e,t){"use strict";t.d(e,{Zo:function(){return u},kt:function(){return h}});var r=t(7294);function c(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){c(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,c=function(n,e){if(null==n)return{};var t,r,c={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(c[t]=n[t]);return c}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(c[t]=n[t])}return c}var i=r.createContext({}),s=function(n){var e=r.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},u=function(n){var e=s(n.components);return r.createElement(i.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},b=r.forwardRef((function(n,e){var t=n.components,c=n.mdxType,a=n.originalType,i=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),b=s(t),h=c,m=b["".concat(i,".").concat(h)]||b[h]||p[h]||a;return t?r.createElement(m,o(o({ref:e},u),{},{components:t})):r.createElement(m,o({ref:e},u))}));function h(n,e){var t=arguments,c=e&&e.mdxType;if("string"==typeof n||c){var a=t.length,o=new Array(a);o[0]=b;var l={};for(var i in e)hasOwnProperty.call(e,i)&&(l[i]=e[i]);l.originalType=n,l.mdxType="string"==typeof n?n:c,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},8077:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return s},assets:function(){return u},toc:function(){return p},default:function(){return h}});var r=t(4034),c=t(9973),a=(t(7294),t(3905)),o=["components"],l={slug:443,title:"443 \u538b\u7f29\u5b57\u7b26\u4e32",tags:["\u53cc\u6307\u9488","\u8fed\u4ee3\u5668","\u5b57\u7b26\u4e32"]},i=void 0,s={permalink:"/leetcode/443",editUrl:"https://github.com/duskmoon314/leetcode/edit/master/website/blog/blog/2021-08-21-443.md",source:"@site/blog/2021-08-21-443.md",title:"443 \u538b\u7f29\u5b57\u7b26\u4e32",description:"\u6700\u7b80\u5355\u7684\u60f3\u6cd5\u5e94\u8be5\u662f\u904d\u5386\u4e00\u6bb5\uff0c\u5f80\u5411\u91cf\u6700\u540e push \u4e00\u6bb5\uff0c\u4f46\u662f\u8981\u6c42\u7528\u5e38\u91cf\u7a7a\u95f4\uff0c\u6240\u4ee5\u5e94\u8be5\u662f\u8981\u7528\u539f\u5730\u4fee\u6539\u7684\u65b9\u5f0f\uff08\u4f46\u8fd9\u65b9\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u9ad8\u4e86\u4e00\u4e9b\uff09",date:"2021-08-21T00:00:00.000Z",formattedDate:"August 21, 2021",tags:[{label:"\u53cc\u6307\u9488",permalink:"/leetcode/tags/\u53cc\u6307\u9488"},{label:"\u8fed\u4ee3\u5668",permalink:"/leetcode/tags/\u8fed\u4ee3\u5668"},{label:"\u5b57\u7b26\u4e32",permalink:"/leetcode/tags/\u5b57\u7b26\u4e32"}],readingTime:3.48,truncated:!0,authors:[],prevItem:{title:"789 \u9003\u8131\u963b\u788d\u8005",permalink:"/leetcode/789"},nextItem:{title:"1137 \u7b2cN\u4e2a\u6cf0\u6ce2\u90a3\u5951\u6570",permalink:"/leetcode/1137"}},u={authorsImageUrls:[]},p=[{value:"\u9898\u76ee",id:"\u9898\u76ee",children:[],level:2},{value:"C++ Solution",id:"c-solution",children:[],level:2}],b={toc:p};function h(n){var e=n.components,t=(0,c.Z)(n,o);return(0,a.kt)("wrapper",(0,r.Z)({},b,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u6700\u7b80\u5355\u7684\u60f3\u6cd5\u5e94\u8be5\u662f\u904d\u5386\u4e00\u6bb5\uff0c\u5f80\u5411\u91cf\u6700\u540e push \u4e00\u6bb5\uff0c\u4f46\u662f\u8981\u6c42\u7528\u5e38\u91cf\u7a7a\u95f4\uff0c\u6240\u4ee5\u5e94\u8be5\u662f\u8981\u7528\u539f\u5730\u4fee\u6539\u7684\u65b9\u5f0f\uff08\u4f46\u8fd9\u65b9\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u9ad8\u4e86\u4e00\u4e9b\uff09"),(0,a.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,a.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4 chars \uff0c\u8bf7\u4f7f\u7528\u4e0b\u8ff0\u7b97\u6cd5\u538b\u7f29\uff1a"),(0,a.kt)("p",null,"\u4ece\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32 s \u5f00\u59cb\u3002\u5bf9\u4e8e chars \u4e2d\u7684\u6bcf\u7ec4 \u8fde\u7eed\u91cd\u590d\u5b57\u7b26 \uff1a"),(0,a.kt)("p",null,"\u5982\u679c\u8fd9\u4e00\u7ec4\u957f\u5ea6\u4e3a 1 \uff0c\u5219\u5c06\u5b57\u7b26\u8ffd\u52a0\u5230 s \u4e2d\u3002\n\u5426\u5219\uff0c\u9700\u8981\u5411 s \u8ffd\u52a0\u5b57\u7b26\uff0c\u540e\u8ddf\u8fd9\u4e00\u7ec4\u7684\u957f\u5ea6\u3002\n\u538b\u7f29\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32 s \u4e0d\u5e94\u8be5\u76f4\u63a5\u8fd4\u56de \uff0c\u9700\u8981\u8f6c\u50a8\u5230\u5b57\u7b26\u6570\u7ec4 chars \u4e2d\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u7ec4\u957f\u5ea6\u4e3a 10 \u6216 10 \u4ee5\u4e0a\uff0c\u5219\u5728 chars \u6570\u7ec4\u4e2d\u4f1a\u88ab\u62c6\u5206\u4e3a\u591a\u4e2a\u5b57\u7b26\u3002"),(0,a.kt)("p",null,"\u8bf7\u5728 \u4fee\u6539\u5b8c\u8f93\u5165\u6570\u7ec4\u540e \uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002"),(0,a.kt)("p",null,"\u4f60\u5fc5\u987b\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u53ea\u4f7f\u7528\u5e38\u91cf\u989d\u5916\u7a7a\u95f4\u7684\u7b97\u6cd5\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002"),(0,a.kt)("p",null,"\u793a\u4f8b 1\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1achars = ["a","a","b","b","c","c","c"]\n\u8f93\u51fa\uff1a\u8fd4\u56de 6 \uff0c\u8f93\u5165\u6570\u7ec4\u7684\u524d 6 \u4e2a\u5b57\u7b26\u5e94\u8be5\u662f\uff1a["a","2","b","2","c","3"]\n\u89e3\u91ca\uff1a\n"aa" \u88ab "a2" \u66ff\u4ee3\u3002"bb" \u88ab "b2" \u66ff\u4ee3\u3002"ccc" \u88ab "c3" \u66ff\u4ee3\u3002\n')),(0,a.kt)("p",null,"\u793a\u4f8b 2\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1achars = ["a"]\n\u8f93\u51fa\uff1a\u8fd4\u56de 1 \uff0c\u8f93\u5165\u6570\u7ec4\u7684\u524d 1 \u4e2a\u5b57\u7b26\u5e94\u8be5\u662f\uff1a["a"]\n\u89e3\u91ca\uff1a\n\u6ca1\u6709\u4efb\u4f55\u5b57\u7b26\u4e32\u88ab\u66ff\u4ee3\u3002\n')),(0,a.kt)("p",null,"\u793a\u4f8b 3\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1achars = ["a","b","b","b","b","b","b","b","b","b","b","b","b"]\n\u8f93\u51fa\uff1a\u8fd4\u56de 4 \uff0c\u8f93\u5165\u6570\u7ec4\u7684\u524d 4 \u4e2a\u5b57\u7b26\u5e94\u8be5\u662f\uff1a["a","b","1","2"]\u3002\n\u89e3\u91ca\uff1a\n\u7531\u4e8e\u5b57\u7b26 "a" \u4e0d\u91cd\u590d\uff0c\u6240\u4ee5\u4e0d\u4f1a\u88ab\u538b\u7f29\u3002"bbbbbbbbbbbb" \u88ab \u201cb12\u201d \u66ff\u4ee3\u3002\n\u6ce8\u610f\u6bcf\u4e2a\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u90fd\u6709\u5b83\u81ea\u5df1\u7684\u4f4d\u7f6e\u3002\n')),(0,a.kt)("p",null,"\u63d0\u793a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1 <= chars.length <= 2000\nchars[i] \u53ef\u4ee5\u662f\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3001\u5927\u5199\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u6216\u7b26\u53f7\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u94fe\u63a5\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/string-compression"},"https://leetcode-cn.com/problems/string-compression"),"\n\u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002")),(0,a.kt)("h2",{id:"c-solution"},"C++ Solution"),(0,a.kt)("p",null,"\u975e\u5e38\u91cf\u7a7a\u95f4\u505a\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int compress(vector<char> &chars) {\n        int len = chars.size();\n        char current = chars[0];\n        int cnt = 1;\n        for (int i = 1; i < len; ++i)\n        {\n            if (chars[i] == current)\n            {\n                cnt += 1;\n                continue;\n            }\n            if (cnt == 1)\n            {\n                chars.push_back(current);\n                current = chars[i];\n                cnt = 1;\n            }\n            else\n            {\n                chars.push_back(current);\n                current = chars[i];\n                auto s = std::to_string(cnt);\n                for (auto c : s)\n                {\n                    chars.push_back(c);\n                }\n                cnt = 1;\n            }\n        }\n\n        chars.push_back(current);\n        if (cnt != 1)\n        {\n            auto s = std::to_string(cnt);\n            for (auto c : s)\n            {\n                chars.push_back(c);\n            }\n        }\n\n        chars.erase(chars.begin(), chars.begin() + len);\n        return chars.size();\n    }\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int compress(vector<char> &chars) {\n        int len = chars.size();\n        int lo = 0;\n        int hi = 0;\n        int write = 0;\n        while (lo < len)\n        {\n            while (hi < len && chars[lo] == chars[hi])\n            {\n                hi += 1;\n            }\n            chars[write] = chars[lo];\n            write += 1;\n            if (hi - lo == 1)\n            {\n            }\n            else\n            {\n                int w = write;\n                int cnt = hi - lo;\n                while (cnt != 0)\n                {\n                    chars[write] = '0' + cnt % 10;\n                    write += 1;\n                    cnt /= 10;\n                }\n                reverse(chars.begin() + w, chars.begin() + write);\n            }\n            lo = hi;\n        }\n        chars.erase(chars.begin() + write, chars.end());\n        return write;\n    }\n};\n")))}h.isMDXComponent=!0}}]);